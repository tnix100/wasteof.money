<!DOCTYPE html>
<html lang="en">

<%- include('../partials/head.ejs', {page: user.name, vue: true, profile:true, username:user.name, userid:user._id}); %>


<body class='bg-gray-100'>
    <%- include('../partials/nav.ejs', {active: "user_"+user.name, user:loggedInUser, loggedIn}); %>
    <div id='data' class='hidden'>
        <% if(loggedIn){ %>
        <input type="hidden" id="loggedInUserID" value="<%= loggedInUser._id %>">
        <% } %>
        <input type="hidden" id="username" value="<%= user.name %>">
    </div>
    <main class='container mx-auto px-4 mt-28 md:mt-16' id='app' v-cloak>
        <img src="/picture/<%= user._id %>" height="30px" class='rounded-full h-10 inline-block shadow'>
        <h1 class="text-base">@<%= user.name %> <%- user.admin? '<span class="iconify inline-block mr-1 text-indigo-600" data-icon="uil:shield-check" data-inline="true"></span>' : user.verified? '<span class="iconify inline-block mr-1 text-indigo-600" data-icon="uil:check-circle" data-inline="true"></span>' : '' %></h1>
        <% if(loggedInUser) { %>
        <button data-user='<%= user.name %>' id='follow'
            class="group relative inline-block py-2 px-4 border border-transparent text-sm leading-5 font-medium rounded-md text-white <%= user.followers.includes(loggedInUser._id.toString())? 'bg-gray-500 hover:bg-gray-500' : 'bg-indigo-500 hover:bg-indigo-500' %> transition duration-150 ease-in-out">
            <span class="iconify inline-block mr-1" data-icon="uil:user-plus" data-inline="true"></span>
            <span class='inline-block'
                id='follow-text'><%= user.followers.includes(loggedInUser._id.toString())? 'Unfollow' : 'Follow' %></span>
        </button>
        <% } %>
        <% if(loggedInUser && loggedInUser.admin) { %>
        <button data-user='<%= user.name %>' id='msg'
            class="group relative inline-block py-2 px-4 border border-transparent text-sm leading-5 font-medium rounded-md text-white <%= true == false? 'bg-gray-500 hover:bg-gray-500' : 'bg-indigo-500 hover:bg-indigo-500' %> transition duration-150 ease-in-out">
            <span class="iconify inline-block mr-1" data-icon="uil:user-plus" data-inline="true"></span>
            <span class='inline-block'
                id='msg-text'>Message</span>
        </button>
        <button data-user='<%= user.name %>' id='ban'
            class="group relative inline-block py-2 px-4 border border-transparent text-sm leading-5 font-medium rounded-md text-white <%= user.banned? 'bg-gray-500 hover:bg-gray-500' : 'bg-indigo-500 hover:bg-indigo-500' %> transition duration-150 ease-in-out">
            <span class="iconify inline-block mr-1" data-icon="uil:user-plus" data-inline="true"></span>
            <span class='inline-block'
                id='ban-text'><%= user.banned? 'Unban' : 'Ban' %></span>
        </button>
        <button data-user='<%= user.name %>' id='impersonate'
            class="group relative inline-block py-2 px-4 border border-transparent text-sm leading-5 font-medium rounded-md text-white <%= true == false? 'bg-gray-500 hover:bg-gray-500' : 'bg-indigo-500 hover:bg-indigo-500' %> transition duration-150 ease-in-out">
            <span class="iconify inline-block mr-1" data-icon="uil:user-plus" data-inline="true"></span>
            <span class='inline-block'
                id='impersonate-text'>Impersonate</span>
        </button>
        <button data-user='<%= user.name %>' id='admin'
            class="group relative inline-block py-2 px-4 border border-transparent text-sm leading-5 font-medium rounded-md text-white <%= user.admin? 'bg-gray-500 hover:bg-gray-500' : 'bg-indigo-500 hover:bg-indigo-500' %> transition duration-150 ease-in-out">
            <span class="iconify inline-block mr-1" data-icon="uil:user-plus" data-inline="true"></span>
            <span class='inline-block'
                id='admin-text'><%= user.admin? 'Demote' : 'Promote' %></span>
        </button>
        <br />
        <span id='ban-reason'>Last ban reason: <%= user.banReason %></span>
        <% } %>
        <p class="text-gray-700"><a :href='`/users/${user}/followers`'><span id='follower-count'><%= user.followers ? user.followers.length.toString() : '0' %></span> followers</a> | <a :href='`/users/${user}/following`'><span id='following-count'><%= user.following ? user.following.length.toString() : '0' %></span> following</a></p> <!-- todo: make api also find who the user is following -->
        <p class="text-gray-700 italic">id: <%= user._id %></p>
        <post v-for="post in posts" v-bind:key="post._id" v-bind:post="post" v-bind:logged-in-user-id="loggedInUserID"></post>
        <button v-if='!last' @click="loadMore()" href="/login"
            class="max-w-2xl w-full mx-auto flex items-center justify-center mb-5 py-3 border border-transparent text-base font-medium rounded-md text-indigo-700 bg-indigo-100 hover:bg-indigo-200 md:text-lg transition duration-150 ease-in-out">
            Load more
        </button>
    </main>
</body>

<%- include('../partials/scripts.ejs'); %>
<script src="/assets/js/love.js"></script>
<script type="module">
    import Post from "../assets/js/components/post.js";
    console.log('user script loaded')
    var user = document.getElementById('username').value //TODO: is there a better way to do this? TODO: clean this the heck up
    var loggedInUserIDInput = document.getElementById('loggedInUserID')

    const urlParams = new URLSearchParams(window.location.search);
    const onePost = urlParams.get('post');

    if (loggedInUserIDInput) var loggedInUserID = loggedInUserIDInput.value
    var app = new Vue({
        el: '#app',
        components: {
          Post // this is much cleaner than doing Vue.component(...)
        },
        data: {
            page: 1,
            last: false,
            posts: [],
            loggedInUserID,
            user
        },
        async mounted() {
            if (onePost) {
                console.log('loading one post')
                this.page = 0
                var res = await fetch(`/api/posts/${onePost}`)
                var data = await res.json()
                data.highlight = true
                Vue.set(this.posts, 0, data)
            } else {
                console.log('loading all posts')
                var res = await fetch(`/api/users/${user}/posts`)
                var data = await res.json()
                this.posts = data.posts
                this.last = data.last
            }
        },
        methods: {
            loadMore: async function () {
                if (this.page == 0) {
                    var newURL = location.href.split("?")[0];
                    window.history.pushState('object', document.title, newURL);
                    this.posts = [] //remove all posts if the page was 0, because that means it was a specific post
                }
                this.page++
                var res = await fetch(`/api/users/${user}/posts?page=${this.page}`)
                var data = await res.json()
                this.posts = data.posts = this.posts.concat(data.posts) // yo what is this meant to be like this
                this.last = data.last
            },
            lovePost: async function (id) {
                love(id, (newLoves, action) => {
                    // add _id to post loves array client side, so that it updates
                    var post = this.posts.find(i => i._id == id)
                    if (post) {
                        post.loves = newLoves
                    }
                })
            }
        }
    })

    var followButton = document.querySelector('#follow')
    var msgButton = document.querySelector('#msg')
    var banButton = document.querySelector('#ban')
    var impersonateButton = document.querySelector('#impersonate')
    var adminButton = document.querySelector('#admin')

    if (followButton) {
        followButton.addEventListener('click', e => {
            follow(followButton.dataset.user)
        })
    }
    if (msgButton) {
        msgButton.addEventListener('click', e => {
            msg(msgButton.dataset.user)
        })
    }
    if (banButton) {
        banButton.addEventListener('click', e => {
            ban(banButton.dataset.user)
        })
    }
    if (impersonateButton) {
        impersonateButton.addEventListener('click', e => {
            impersonate(impersonateButton.dataset.user)
        })
    }
    if (adminButton) {
        adminButton.addEventListener('click', e => {
            admin(adminButton.dataset.user)
        })
    }

    async function follow(user) {
        console.log(`gonna follow ${user}`)
        var followres = await fetch(`/users/${user}/follow`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'X-Requested-With': 'XMLHttpRequest'
            }
        })
        var followjson = await followres.json()
        console.log(followjson)
        if (followjson.ok) {
            document.getElementById('follower-count').innerText = followjson.followers.toString() || 'error'
            document.getElementById('following-count').innerText = followjson.following.toString() || 'error'
            if (followjson.action == 'follow') {
                document.getElementById('follow-text').innerText = `Unfollow`
                followButton.classList.remove('bg-indigo-500', 'hover:bg-indigo-500')
                followButton.classList.add('bg-gray-500', 'hover:bg-gray-500')
            }
            if (followjson.action == 'unfollow') {
                document.getElementById('follow-text').innerText = `Follow`
                followButton.classList.remove('bg-gray-500', 'hover:bg-gray-500')
                followButton.classList.add('bg-indigo-500', 'hover:bg-indigo-500')
            }
        }
        if (followjson.error) {
            Swal.fire({
                icon: 'error',
                title: 'Failed to follow',
                text: followjson.error,
                footer: '<a href="https://github.com/jeffalo/wasteof.money/issues" target="_blank" rel="noopener">Report issues</a>'
            })
        }
    }

    async function msg(user) {
        var msg_content = prompt("Message:")
        if (msg_content !== null) {
            console.log(`gonna msg ${user}`)
            var msgres = await fetch(`/users/${user}/msg`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-Requested-With': 'XMLHttpRequest'
                },
                body: JSON.stringify({ content: msg_content })
            })
            var msgjson = await msgres.json()
            console.log(msgjson)
            if (msgjson.ok) {
                Swal.fire({
                    icon: 'success',
                    title: 'Sent message',
                    text: msgjson.ok
                })
            }
            if (msgjson.error) {
                Swal.fire({
                    icon: 'error',
                    title: 'Failed to message',
                    text: msgjson.error,
                    footer: '<a href="https://github.com/jeffalo/wasteof.money/issues" target="_blank" rel="noopener">Report issues</a>'
                })
            }
        }
    }

    async function ban(user) {
        if (document.getElementById('ban-text').innerText == `Ban`) var banReason = prompt("Ban reason (will be shown to user):")
        if (banReason !== null || document.getElementById('ban-text').innerText == `Unban`) {
            console.log(`gonna ban ${user}`)
            var banres = await fetch(`/users/${user}/ban`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-Requested-With': 'XMLHttpRequest'
                },
                body: JSON.stringify({ reason: banReason })
            })
            var banjson = await banres.json()
            console.log(banjson)
            if (banjson.ok) {
                if (banjson.action == 'ban') {
                    Swal.fire({
                        icon: 'success',
                        title: 'Banned user',
                        text: banjson.ok
                    })
                    document.getElementById('ban-text').innerText = `Unban`
                    document.getElementById('ban-reason').innerText = banReason
                    banButton.classList.remove('bg-indigo-500', 'hover:bg-indigo-500')
                    banButton.classList.add('bg-gray-500', 'hover:bg-gray-500')
                }
                if (banjson.action == 'unban') {
                    Swal.fire({
                        icon: 'success',
                        title: 'Unbanned user',
                        text: banjson.ok
                    })
                    document.getElementById('ban-text').innerText = `Ban`
                    banButton.classList.remove('bg-gray-500', 'hover:bg-gray-500')
                    banButton.classList.add('bg-indigo-500', 'hover:bg-indigo-500')
                }
            }
            if (banjson.error) {
                Swal.fire({
                    icon: 'error',
                    title: 'Failed to ban',
                    text: banjson.error,
                    footer: '<a href="https://github.com/jeffalo/wasteof.money/issues" target="_blank" rel="noopener">Report issues</a>'
                })
            }
        }
    }

    async function impersonate(user) {
        console.log(`gonna impersonate ${user}`)
        var impersonateres = await fetch(`/login`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ username: user, password: "" })
        })
        var impersonatejson = await impersonateres.json()
        console.log(impersonatejson)
        if (impersonatejson.ok) {
            window.location.reload();
        }
        if (impersonatejson.error) {
            Swal.fire({
                icon: 'error',
                title: 'Failed to impersonate',
                text: impersonatejson.error,
                footer: '<a href="https://github.com/jeffalo/wasteof.money/issues" target="_blank" rel="noopener">Report issues</a>'
            })
        }
    }

    async function admin(user) {
        if (confirm("Are you sure you want to promote/demote this user?")) {
            console.log(`gonna make ${user} admin`)
            var adminres = await fetch(`/users/${user}/admin`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-Requested-With': 'XMLHttpRequest'
                }
            })
            var adminjson = await adminres.json()
            console.log(adminjson)
            if (adminjson.ok) {
                if (adminjson.action == 'promote') {
                    Swal.fire({
                        icon: 'success',
                        title: 'Promoted user',
                        text: adminjson.ok
                    })
                    document.getElementById('admin-text').innerText = `Demote`
                    adminButton.classList.remove('bg-indigo-500', 'hover:bg-indigo-500')
                    adminButton.classList.add('bg-gray-500', 'hover:bg-gray-500')
                }
                if (adminjson.action == 'demote') {
                    Swal.fire({
                        icon: 'success',
                        title: 'Demoted user',
                        text: adminjson.ok
                    })
                    document.getElementById('admin-text').innerText = `Promote`
                    adminButton.classList.remove('bg-gray-500', 'hover:bg-gray-500')
                    adminButton.classList.add('bg-indigo-500', 'hover:bg-indigo-500')
                }
            }
            if (adminjson.error) {
                Swal.fire({
                    icon: 'error',
                    title: 'Failed to promote/demote',
                    text: adminjson.error,
                    footer: '<a href="https://github.com/jeffalo/wasteof.money/issues" target="_blank" rel="noopener">Report issues</a>'
                })
            }
        }
    }
</script>

</html>
